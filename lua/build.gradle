
apply plugin: 'c'

version '5.2.3'
description 'build.gradle project for Lua'


ext {
    defines = ['LUA_COMPAT_ALL']
    gccArgs = ['-O2', '-Wall']

    linuxGccDefines = []
    linuxGccArgs = ['-lm', '-ldl', '-lreadline']
    linuxGccLinkerArgs = ['-E']

    solarisGccDefines = ['LUA_USE_POSIX', 'LUA_USE_DLOPEN']
    solarisGccArgs = ['-ldl']
    solarisGccLinkerArgs = []
}


model {

    platforms {
        linux_arm {
            architecture 'arm'
            operatingSystem 'linux'
        }
        linux_i386 {
            architecture 'i386'
            operatingSystem 'linux'
        }
        linux_amd64 {
            architecture 'amd64'
            operatingSystem 'linux'
        }


        windows_x86 {
            architecture 'i386'
            operatingSystem 'windows'
        }
        windows_x64 {
            architecture 'amd64'
            operatingSystem 'windows'
        }


        macosx {
            operatingSystem 'osx'
        }


        solaris {
            operatingSystem 'solaris'
        }

        // This part of gradle doesn't support Lua's PLATS via operatingSystem values.
        //
        //  aix ansi bsd freebsd generic mingw posix
        //  (maybe does mingw)
        //
        // At least not like this.
    }


    binaries.all {
        def flags = project.ext

        cCompiler.define flags.defines

        if (toolChain in Gcc) {
            cCompiler.args flags.gccArgs

            def os = targetPlatform.name 
            if (os == 'linux') {
                cCompiler.define linuxGccDefines
                cCompiler.args flags.linuxGccArgs
                linker.args flags.linuxGccLinkerArgs
            }
            else if (os == 'solaris') {
                cCompiler.define solarisGccDefines
                cCompiler.args flags.solarisGccArgs
                linker.args flags.solarisGccLinkerArgs
            }
        }
    }
}


sources {
    /*
     * Sources for the Lua base library.
     */
    base {
        c {
            source {
                srcDir "src"
                include '*.c'
                exclude 'lua.c', 'luac.c'
            }
            exportedHeaders {
                include 'lauxlib.h', 'lua.h', 'lua.hpp', 'luaconf.h', 'lualib.h'
            }
        }
    }

    /*
     * Sources specific to Lua interpreter.
     */
    lua {
        c {
            source {
                srcDir "src"
                include 'lua.c'
            }
        }
    }

    /*
     * Sources specific to Lua compiler.
     */
    luac {
        c {
            source {
                srcDir "src"
                include 'luac.c'
            }
        }
    }
}


libraries {
    lua {
        source sources.base
    }
}


executables {
    lua {
        source sources.lua
        binaries.all {
            lib libraries.lua.static
        }
    }

    luac {
        source sources.luac
        binaries.all {
            lib libraries.lua.static
        }
    }
}


task build(description: 'Assembles and tests this project.') {
    dependsOn binaries.withType(StaticLibraryBinary).matching {
        it.buildable
    }
    dependsOn binaries.withType(SharedLibraryBinary).matching {
        it.buildable
    }
    dependsOn binaries.withType(ExecutableBinary).matching {
        it.buildable
    }
}

